// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/service/interfaces.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockGoodsManagerRepo is a mock of GoodsManagerRepo interface.
type MockGoodsManagerRepo struct {
	ctrl     *gomock.Controller
	recorder *MockGoodsManagerRepoMockRecorder
}

// MockGoodsManagerRepoMockRecorder is the mock recorder for MockGoodsManagerRepo.
type MockGoodsManagerRepoMockRecorder struct {
	mock *MockGoodsManagerRepo
}

// NewMockGoodsManagerRepo creates a new mock instance.
func NewMockGoodsManagerRepo(ctrl *gomock.Controller) *MockGoodsManagerRepo {
	mock := &MockGoodsManagerRepo{ctrl: ctrl}
	mock.recorder = &MockGoodsManagerRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGoodsManagerRepo) EXPECT() *MockGoodsManagerRepoMockRecorder {
	return m.recorder
}

// CancelReservation mocks base method.
func (m *MockGoodsManagerRepo) CancelReservation(ctx context.Context, itemIDs []int64, storageID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelReservation", ctx, itemIDs, storageID)
	ret0, _ := ret[0].(error)
	return ret0
}

// CancelReservation indicates an expected call of CancelReservation.
func (mr *MockGoodsManagerRepoMockRecorder) CancelReservation(ctx, itemIDs, storageID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelReservation", reflect.TypeOf((*MockGoodsManagerRepo)(nil).CancelReservation), ctx, itemIDs, storageID)
}

// ItemsAmount mocks base method.
func (m *MockGoodsManagerRepo) ItemsAmount(ctx context.Context, storageID int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ItemsAmount", ctx, storageID)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ItemsAmount indicates an expected call of ItemsAmount.
func (mr *MockGoodsManagerRepoMockRecorder) ItemsAmount(ctx, storageID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ItemsAmount", reflect.TypeOf((*MockGoodsManagerRepo)(nil).ItemsAmount), ctx, storageID)
}

// ReserveItems mocks base method.
func (m *MockGoodsManagerRepo) ReserveItems(ctx context.Context, itemIDs []int64, storageID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReserveItems", ctx, itemIDs, storageID)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReserveItems indicates an expected call of ReserveItems.
func (mr *MockGoodsManagerRepoMockRecorder) ReserveItems(ctx, itemIDs, storageID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReserveItems", reflect.TypeOf((*MockGoodsManagerRepo)(nil).ReserveItems), ctx, itemIDs, storageID)
}
